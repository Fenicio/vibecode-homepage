generator client {
  provider = "prisma-client-js"
  output   = "../app/lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String  @db.VarChar(255)
  provider          String  @db.VarChar(255)
  providerAccountId String  @db.VarChar(255)
  refresh_token     String?
  access_token      String?
  expires_at        BigInt?
  id_token          String?
  scope             String?
  session_state     String?
  token_type        String?
}

model comments {
  id              Int              @id @default(autoincrement())
  content         String
  user_id         Int?
  story_id        Int?
  created_at      DateTime         @default(now()) @db.Timestamp(6)
  updated_at      DateTime         @default(now()) @db.Timestamp(6)
  success_stories success_stories? @relation(fields: [story_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users?           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([story_id], map: "idx_comments_story")
  @@index([user_id], map: "idx_comments_user")
}

model glossary {
  id                                                                      Int                      @id @default(autoincrement())
  term                                                                    String                   @unique @db.VarChar(100)
  slug                                                                    String                   @unique @db.VarChar(100)
  definition                                                              String
  created_at                                                              DateTime                 @default(now()) @db.Timestamp(6)
  updated_at                                                              DateTime                 @default(now()) @db.Timestamp(6)
  related_glossary_terms_related_glossary_terms_related_term_idToglossary related_glossary_terms[] @relation("related_glossary_terms_related_term_idToglossary")
  related_glossary_terms_related_glossary_terms_term_idToglossary         related_glossary_terms[] @relation("related_glossary_terms_term_idToglossary")

  @@index([term], map: "idx_glossary_term")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model related_glossary_terms {
  term_id                                                   Int
  related_term_id                                           Int
  glossary_related_glossary_terms_related_term_idToglossary glossary @relation("related_glossary_terms_related_term_idToglossary", fields: [related_term_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  glossary_related_glossary_terms_term_idToglossary         glossary @relation("related_glossary_terms_term_idToglossary", fields: [term_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([term_id, related_term_id])
}

model sessions {
  id           Int      @id @default(autoincrement())
  userId       Int
  expires      DateTime @db.Timestamptz(6)
  sessionToken String   @db.VarChar(255)
}

model success_stories {
  id                  Int                   @id @default(autoincrement())
  title               String                @db.VarChar(255)
  content             String
  slug                String                @unique @db.VarChar(255)
  optional_url        String?               @db.VarChar(255)
  featured            Boolean?              @default(false)
  user_id             Int?
  created_at          DateTime              @default(now()) @db.Timestamp(6)
  updated_at          DateTime              @default(now()) @db.Timestamp(6)
  comments            comments[]
  users               users?                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  success_story_tools success_story_tools[]

  @@index([slug], map: "idx_success_stories_slug")
  @@index([user_id], map: "idx_success_stories_user")
}

model success_story_tools {
  story_id        Int
  tool_id         Int
  success_stories success_stories @relation(fields: [story_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tools           tools           @relation(fields: [tool_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([story_id, tool_id])
}

model tools {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(100)
  slug                String                @unique @db.VarChar(100)
  description         String?
  icon                String?               @db.VarChar(255)
  url                 String?               @db.VarChar(255)
  category            String?               @db.VarChar(100)
  created_at          DateTime              @default(now()) @db.Timestamp(6)
  updated_at          DateTime              @default(now()) @db.Timestamp(6)
  success_story_tools success_story_tools[]

  @@index([slug], map: "idx_tools_slug")
}

model users {
  id                        Int               @id @default(autoincrement())
  email                     String            @unique @db.VarChar(255)
  password                  String            @db.VarChar(255)
  reset_password_token      String?           @db.VarChar(255)
  reset_password_expiration DateTime?         @db.Timestamp(6)
  salt                      String?           @db.VarChar(255)
  name                      String?           @unique(map: "users_username_key") @db.VarChar(255)
  first_name                String?           @db.VarChar(100)
  last_name                 String?           @db.VarChar(100)
  bio                       String?
  experience_level          String?           @db.VarChar(50)
  avatar                    String?           @db.VarChar(255)
  created_at                DateTime          @default(now()) @db.Timestamp(6)
  updated_at                DateTime          @default(now()) @db.Timestamp(6)
  githubid                  String?           @unique @db.VarChar(255)
  emailVerified             DateTime?         @db.Timestamptz(6)
  image                     String?
  comments                  comments[]
  success_stories           success_stories[]

  @@index([email], map: "idx_users_email")
  @@index([name], map: "idx_users_username")
}

model verification_token {
  identifier String
  expires    DateTime @db.Timestamptz(6)
  token      String

  @@id([identifier, token])
}

model vibe_tools {
  id          Int     @id @default(autoincrement())
  toolname    String
  description String?
  svgicon     String?
}
